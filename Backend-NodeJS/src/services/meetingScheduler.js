const db = require("../models"); // Import models
const cron = require("node-cron");
require("dotenv").config();
const nodemailer = require("nodemailer");

// H√†m t·∫°o Jitsi Meet khi ƒë·∫∑t l·ªãch
function createJitsiMeet() {
  const roomName = `meeting-${Date.now()}`; // ID ph√≤ng d·ª±a tr√™n timestamp
  return `https://meet.jit.si/${roomName}`;
}

// H√†m ki·ªÉm tra link ƒë√£ h·∫øt h·∫°n ch∆∞a (1 ti·∫øng sau gi·ªù h·∫πn)
function isMeetLinkExpired(booking) {
  const scheduleTime = new Date(
    `${booking.schedules.date}T${booking.schedules.Time.starttime}`
  );
  return Date.now() - scheduleTime.getTime() > 60 * 60000; // Qu√° 1 gi·ªù ‚Üí h·∫øt h·∫°n
}

const formatDate = (dateString) => {
  const [year, month, day] = dateString.split("-");
  return `${day}/${month}/${year}`;
};

const sentEmails = new Set(); // L∆∞u danh s√°ch email ƒë√£ g·ª≠i trong m·ªói l·∫ßn ch·∫°y

async function scheduleMeetingCheck() {
  console.log("üîÑ Ki·ªÉm tra cu·ªôc h·∫πn s·∫Øp di·ªÖn ra...");
  const now = new Date();
  const today = now.toISOString().split("T")[0];

  try {
    const upcomingSchedules = await db.schedules.findAll({
      where: { date: today },
      include: [
        { model: db.time, as: "Time" },
        {
          model: db.doctor,
          as: "Doctor",
          where: { onlineConsultation: 1 },
          include: [
            { model: db.User, as: "User", attributes: ["email", "fullname"] },
          ],
        },
        {
          model: db.booking,
          as: "Bookings",
          where: { statusID: 1 }, // L·∫•y t·∫•t c·∫£ c√°c cu·ªôc h·∫πn ƒëang ch·ªù
          include: [
            { model: db.User, as: "User", attributes: ["email", "fullname"] },
          ],
        },
      ],
    });

    for (const schedule of upcomingSchedules) {
      if (!schedule.Time || !schedule.Bookings.length) continue;

      const scheduleTime = new Date(
        `${schedule.date}T${schedule.Time.starttime}`
      );
      const timeDiff = scheduleTime - now;

      // üìå N·∫øu g·∫ßn ƒë·∫øn gi·ªù h·∫πn (<= 10 ph√∫t) m√† ch∆∞a c√≥ meetlink, t·∫°o m·ªõi
      if (timeDiff <= 10 * 60000 && !schedule.meetlink) {
        let meetlink = createJitsiMeet();
        await db.schedules.update({ meetlink }, { where: { id: schedule.id } });

        console.log(`‚úÖ T·∫°o link Jitsi: ${meetlink}`);
        schedule.meetlink = meetlink;
      }

      // üì© G·ª≠i email nh·∫Øc nh·ªü cho t·ª´ng b·ªánh nh√¢n n·∫øu ch∆∞a g·ª≠i
      if (schedule.meetlink) {
        for (const booking of schedule.Bookings) {
          let patientEmail = booking.User.email;

          if (!sentEmails.has(patientEmail)) {
            // Ki·ªÉm tra email ƒë√£ g·ª≠i ch∆∞a
            try {
              await sendEmail(
                patientEmail,
                "Nh·∫Øc nh·ªü cu·ªôc h·∫πn",
                schedule.meetlink,
                schedule.Doctor?.User.fullname || "Kh√¥ng x√°c ƒë·ªãnh",
                schedule.date || "0000-00-00",
                schedule.Time?.starttime || "00:00"
              );

              console.log(`üì© ƒê√£ g·ª≠i email cho: ${patientEmail}`);
              sentEmails.add(patientEmail); // ƒê√°nh d·∫•u email ƒë√£ g·ª≠i
            } catch (error) {
              console.error(`‚ùå L·ªói g·ª≠i email t·ªõi ${patientEmail}:`, error);
            }
          }
        }
      }
    }
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm tra cu·ªôc h·∫πn:", error);
  }
}

// H√†m g·ª≠i email cho b·ªánh nh√¢n
// async function sendEmail(to, subject, text) {
//   const transporter = nodemailer.createTransport({
//     service: "gmail",
//     auth: {
//       user: process.env.EMAIL_USER,
//       pass: process.env.EMAIL_PASSWORD,
//     },
//   });

//   const mailOptions = { from: process.env.EMAIL_USER, to, subject, text };

//   try {
//     await transporter.sendMail(mailOptions);
//     console.log(`üìß Email ƒë√£ g·ª≠i ƒë·∫øn ${to}`);
//   } catch (error) {
//     console.error("‚ùå L·ªói g·ª≠i email:", error);
//   }
// }
async function sendEmail(
  to,
  subject,
  meetlink,
  doctorName,
  appointmentDate,
  appointmentTime
) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD,
    },
  });

  const formattedDate = formatDate(appointmentDate); // H√†m format ng√†y th√°ng
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to,
    subject,
    html: `
      <h2>üîî Nh·∫Øc Nh·ªü Cu·ªôc H·∫πn Kh√°m B·ªánh - MyDoctor</h2>
      <p>Xin ch√†o,</p>
      <p>Cu·ªôc h·∫πn kh√°m b·ªánh c·ªßa qu√Ω kh√°ch s·∫Øp di·ªÖn ra.</p>
      <p><strong>Th√¥ng tin chi ti·∫øt:</strong></p>
      <ul>
        <li><strong>B√°c sƒ© ph·ª• tr√°ch:</strong> ${doctorName}</li>
        <li><strong>Ng√†y kh√°m:</strong> ${formattedDate}</li>
        <li><strong>Gi·ªù kh√°m:</strong> ${appointmentTime}</li>
      </ul>
      <p><strong>ƒê·ªëi v·ªõi t∆∞ v·∫•n tr·ª±c tuy·∫øn:</strong></p>
      <p>Vui l√≤ng tham gia cu·ªôc h·∫πn qua ƒë∆∞·ªùng link d∆∞·ªõi ƒë√¢y:</p>
      <p><a href="${meetlink}" style="color: #007bff; font-weight: bold;">Tham Gia Cu·ªôc H·∫πn</a></p>
      <p>H√£y ƒë·∫£m b·∫£o b·∫°n tham gia ƒë√∫ng gi·ªù ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.</p>
      <p>Tr√¢n tr·ªçng,<br><strong>Ph√≤ng kh√°m MyDoctor</strong></p>
    `,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log(`üìß Email nh·∫Øc nh·ªü ƒë√£ g·ª≠i ƒë·∫øn ${to}`);
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i email:", error);
  }
}

// Ch·∫°y cron job m·ªói ph√∫t
cron.schedule("* * * * *", scheduleMeetingCheck);

module.exports = scheduleMeetingCheck;
